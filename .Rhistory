1+1
q()
q()
a <- available.packages()
head(rownames(a), 10)
install.packages("KernSmooth")
library(KernSmooth)
q()
q()
q()
q()
q()
q()
q()
q()
q()
x <- list(a = 1:5, b = rnorm(10))
lapply(x,mean)
rnorm(10)
rnorm(1)
help(rnorm)
rnorm(10)
rnorm(20,1)
rnorm(100,5)
x <- list(a = matrix(1:4, 2, 2), b = matrix(1:6, 3, 2))
x
lapply(x, function(elt) elt[,1])
x <- list(a = 1:4, b = rnorm(10), c = rnorm(20, 1), d = rnorm(100, 5))
sapply(x,mean)
mean(x)
help(sapply)
q()
makeCacheMatrix <- function(x = matrix()) {
m<-NULL
set<-function(y){
x<<-y
m<<-NULL
}
get<-function() x
setmatrix<-function(solve) m<<- solve
getmatrix<-function() m
list(set=set, get=get,
setmatrix=setmatrix,
getmatrix=getmatrix)
}
cacheSolve <- function(x=matrix(), ...) {
m<-x$getmatrix()
if(!is.null(m)){
message("getting cached data")
return(m)
}
matrix<-x$get()
m<-solve(matrix, ...)
x$setmatrix(m)
m
}
makeCacheMatrix
x = rbind(c(1, -1/4),c(-1/4, 1))
m =makeCacheMatrix(x)
m$get()
cacheSolve(m)
cacheSolve(m)
ls
ls -l
ls
q
Q
?ls
?debug
Q
print(Q)
q()
q()
ls
debug(ls)
ls
getwd()
setwd("F:/DataScience/R Programming/ProgrammingAssignment2)
"
}
setwd("F:/DataScience/R Programming/ProgrammingAssignment2")
getwd()
source("cachematrix.R")
x = rbind(c(1, -1/4),c(-1/4, 1))
m =makeCacheMatrix(x)
m$get()
cachesolve(m)
cacheSolve(m)
cacheSolve(m)
q()
Q
undebug(ls)
ls
q()
